/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  TrustlessMulticallViewOnly,
  TrustlessMulticallViewOnlyInterface,
} from "../TrustlessMulticallViewOnly";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct TrustlessMulticallRead.ReadCall[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "read",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct TrustlessMulticallRead.ReadResult[]",
        name: "results",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class TrustlessMulticallViewOnly__factory {
  static readonly abi = _abi;
  static createInterface(): TrustlessMulticallViewOnlyInterface {
    return new utils.Interface(_abi) as TrustlessMulticallViewOnlyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TrustlessMulticallViewOnly {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TrustlessMulticallViewOnly;
  }
}
